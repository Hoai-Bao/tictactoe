{"version":3,"sources":["container/Square/index.js","container/Board/index.js","container/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["Square","value","onClick","current","color","bgColor","isWin","className","style","backgroundColor","Board","renderSquare","i","key","winner","props","squares","handleClick","includes","winnerColor","xIsNext","resetBoard","restart","renderBoard","opacity","currentSquare","arr","Array","boardLength","fill","map","_","j","checkWinner","this","Component","Game","calculateWinner","lines","length","a","b","c","history","state","slice","stepNumber","setState","concat","x","y","Math","floor","player","jumpTo","step","reStart","sortMove","isAscending","renderLocation","his","splice","reverse","e","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.15b8e2b2.chunk.js","sourcesContent":["import React from 'react'\r\nimport './style.css'\r\n\r\nexport default function Square({value,onClick,current,isWin}) {\r\n    const color = value==='X'?'red':'blue';\r\n    const bgColor = isWin?'black':current?'#d6d2c4':'#ffffff';\r\n    return (\r\n        <div className=\"square\" onClick={onClick} style={{color,backgroundColor:bgColor}}>\r\n            {value}\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Square from \"../Square\";\r\nimport \"./style.css\";\r\nexport default class Board extends Component {\r\n  renderSquare = (i,key,current) => {\r\n    const winner = this.props.winner;\r\n    return (\r\n      <Square\r\n      key ={key}\r\n        value={this.props.squares[i]}\r\n        onClick={() => {\r\n          this.handleClick(i);\r\n        }}\r\n        current={i===current}\r\n        isWin={winner&&winner!==1&&winner.includes(i)}\r\n      />\r\n    );\r\n  };\r\n  handleClick = (i) => {\r\n    return this.props.onClick(i)\r\n  };\r\n  \r\n  winnerColor = () => {\r\n    return this.props.xIsNext ? \"blue\" : \"red\";\r\n  };\r\n  resetBoard = () => {\r\n    return this.props.restart()\r\n  };\r\n  renderBoard = (opacity) => {\r\n    const currentSquare = this.props.currentSquare;\r\n    let arr = Array(this.props.boardLength).fill(null);\r\n    return arr.map((_, i) => {\r\n      return (\r\n        <div className=\"row\" key={i} style={{ opacity }}>\r\n          {arr.map((_, j) => this.renderSquare(i * 3 + j,j,currentSquare))}\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n  render() {\r\n    const checkWinner = this.props.winner;\r\n    const color = this.props.xIsNext ? \"red\" : \"blue\";\r\n    const opacity = checkWinner ? 0.6 : 1;\r\n    const xIsNext = this.props.xIsNext;\r\n    return (\r\n      <div className=\"board-main\">\r\n        {checkWinner === null ? (\r\n          <div className=\"status\">\r\n            Next Player :{\" \"}\r\n            <span style={{ color }}>{xIsNext ? \"X\" : \"O\"}</span>\r\n          </div>\r\n        ) : checkWinner === 1 ? (\r\n          <div className=\"status\">Draw</div>\r\n        ) : (\r\n          <div className=\"status\">\r\n            Winner :{\" \"}\r\n            <span style={{ color: this.winnerColor() }}>\r\n              {!xIsNext ? \"X\" : \"O\"}\r\n            </span>\r\n          </div>\r\n        )}\r\n        <div className=\"board\">\r\n          {this.renderBoard(opacity)}\r\n          <div className=\"control\">\r\n            {checkWinner ? (\r\n              <button\r\n                onClick={() => {\r\n                  this.resetBoard();\r\n                }}\r\n              >\r\n                restart\r\n              </button>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Board from \"../Board\";\r\nimport \"./style.css\";\r\nexport default class Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      history: [\r\n        { squares: Array(9).fill(null), currentSquare: null, winner: null },\r\n      ],\r\n      xIsNext: true,\r\n      boardLength: 3,\r\n      stepNumber: 0,\r\n      isAscending: true,\r\n    };\r\n  }\r\n  calculateWinner = (squares) => {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (\r\n        squares[a] &&\r\n        squares[a] === squares[b] &&\r\n        squares[a] === squares[c]\r\n      ) {\r\n        return lines[i];\r\n      }\r\n    }\r\n    if (!squares.includes(null)) {\r\n      return 1;\r\n    }\r\n    return null;\r\n  };\r\n  handleClick = (i) => {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (this.calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n    this.setState({\r\n      history: history.concat([\r\n        {\r\n          squares: squares,\r\n          currentSquare: i,\r\n          x: i % 3,\r\n          y: Math.floor(i / 3),\r\n          player: this.state.xIsNext ? \"X\" : \"O\",\r\n          winner: this.calculateWinner(squares),\r\n        },\r\n      ]),\r\n      xIsNext: !this.state.xIsNext,\r\n      stepNumber: history.length,\r\n    });\r\n  };\r\n  jumpTo = (step) => {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: step % 2 === 0,\r\n    });\r\n  };\r\n  reStart = () => {\r\n    this.setState({\r\n      history: [{ squares: Array(9).fill(null), currentSquare: null }],\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n    });\r\n  };\r\n  sortMove = () => {\r\n    this.setState({\r\n      isAscending: !this.state.isAscending,\r\n    });\r\n  };\r\n  renderLocation = (player) => {\r\n    let history = [...this.state.history];\r\n    let his = this.state.isAscending ? history : history.splice(0).reverse();\r\n    let color = player === \"X\" ? \"red\" : \"blue\";\r\n    let step = this.state.stepNumber;\r\n    if(!this.state.isAscending){\r\n      step = his.length - step -1;\r\n    }\r\n    return his.map((e, i) => {\r\n      if (e.player === player) {\r\n        return (\r\n          <button key={i} onClick={() => this.state.isAscending?this.jumpTo(i):this.jumpTo(his.length-i-1)} className={step===i?\"current\":\"\"}>\r\n            {this.state.isAscending ? i : his.length - i -1}.{\"  \"}Move to{\" \"}\r\n            <span style={{ color }}>\r\n              [{e.x},{e.y}]\r\n            </span>\r\n          </button>\r\n        );\r\n      }\r\n      return null;\r\n    });\r\n  };\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = this.calculateWinner(current.squares);\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            boardLength={3}\r\n            xIsNext={this.state.xIsNext}\r\n            squares={current.squares}\r\n            onClick={this.handleClick}\r\n            winner={winner}\r\n            currentSquare={current.currentSquare}\r\n            restart={this.reStart}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          {history.length === 1 ? (\r\n            <div className=\"title-1\">Welcome</div>\r\n          ) : (\r\n            <>\r\n              <div className=\"status\">\r\n                History\r\n                <span>\r\n                  <button onClick={() => this.reStart()}>Restart</button>\r\n                </span>\r\n                <span>\r\n                  <button onClick={() => this.sortMove()}>\r\n                    Sort move:{\" \"}\r\n                    {this.state.isAscending ? \"Ascending\" : \"Decending\"}\r\n                  </button>\r\n                </span>\r\n              </div>\r\n              <div className=\"info\">\r\n                {this.state.isAscending ? (\r\n                  <>\r\n                    <div className=\"info-x\">\r\n                      <div className=\"status\">X</div>\r\n                      <div className=\"move\">{this.renderLocation(\"X\")}</div>\r\n                    </div>\r\n                    <div className=\"info-o\">\r\n                      <div className=\"status\">O</div>\r\n                      <div className=\"move\">{this.renderLocation(\"O\")}</div>\r\n                    </div>\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <div className=\"info-o\">\r\n                      <div className=\"status\">O</div>\r\n                      <div className=\"move\">{this.renderLocation(\"O\")}</div>\r\n                    </div>\r\n                    <div className=\"info-x\">\r\n                      <div className=\"status\">X</div>\r\n                      <div className=\"move\">{this.renderLocation(\"X\")}</div>\r\n                    </div>\r\n                  </>\r\n                )}\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Game from \"./container/Game\";\r\nfunction App() {\r\n  return (\r\n    <div className=\"Game\">\r\n      <div className=\"title\">Tic Tac Toe</div>\r\n      <div>\r\n        <Game />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}