{"version":3,"sources":["container/Square/index.js","container/Board/index.js","container/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["Square","value","onClick","current","color","bgColor","isWin","className","style","backgroundColor","Board","winner","squares","xIsNext","restart","currentSquare","boardLength","checkWinner","opacity","handleClick","i","arr","Array","fill","map","_","key","j","includes","renderSquare","renderBoard","Game","useState","history","setHistory","setxIsNext","stepNumber","setStepNumber","isAscending","setIsAscending","calculateWinner","lines","length","a","b","c","jumpTo","step","reStart","renderLocation","player","histor","his","splice","reverse","e","x","y","slice","concat","Math","floor","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.247d5ac5.chunk.js","sourcesContent":["import React from 'react'\r\nimport './style.css'\r\n\r\nexport default function Square({value,onClick,current,isWin}) {\r\n    const color = value==='X'?'red':'blue';\r\n    const bgColor = isWin?'black':current?'#d6d2c4':'#ffffff';\r\n    return (\r\n        <div className=\"square\" onClick={onClick} style={{color,backgroundColor:bgColor}}>\r\n            {value}\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport Square from \"../Square\";\r\nimport \"./style.css\";\r\nexport default function Board({\r\n  winner,\r\n  squares,\r\n  onClick,\r\n  xIsNext,\r\n  restart,\r\n  currentSquare,\r\n  boardLength,\r\n}) {\r\n  const checkWinner = winner;\r\n  const color = xIsNext ? \"red\" : \"blue\";\r\n  const opacity = checkWinner ? 0.6 : 1;\r\n  const renderSquare = (i, key, current) => {\r\n    return (\r\n      <Square\r\n        key={key}\r\n        value={squares[i]}\r\n        onClick={() => {\r\n          handleClick(i);\r\n        }}\r\n        current={i === current}\r\n        isWin={winner && winner !== 1 && winner.includes(i)}\r\n      />\r\n    );\r\n  };\r\n  const handleClick = (i) => {\r\n    return onClick(i);\r\n  };\r\n\r\n  const winnerColor = () => {\r\n    return xIsNext ? \"blue\" : \"red\";\r\n  };\r\n  const resetBoard = () => {\r\n    return restart();\r\n  };\r\n  const renderBoard = (opacity) => {\r\n    let arr = Array(boardLength).fill(null);\r\n    return arr.map((_, i) => {\r\n      return (\r\n        <div className=\"row\" key={i} style={{ opacity }}>\r\n          {arr.map((_, j) =>\r\n            renderSquare(i * boardLength + j, j, currentSquare)\r\n          )}\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n  return (\r\n    <div className=\"board-main\">\r\n      {checkWinner === null ? (\r\n        <div className=\"status\">\r\n          Next Player : <span style={{ color }}>{xIsNext ? \"X\" : \"O\"}</span>\r\n        </div>\r\n      ) : checkWinner === 1 ? (\r\n        <div className=\"status\">Draw</div>\r\n      ) : (\r\n        <div className=\"status\">\r\n          Winner :{\" \"}\r\n          <span style={{ color: winnerColor() }}>{!xIsNext ? \"X\" : \"O\"}</span>\r\n        </div>\r\n      )}\r\n      <div className=\"board\">\r\n        {renderBoard(opacity)}\r\n        <div className=\"control\">\r\n          {checkWinner && (\r\n            <button\r\n              onClick={() => {\r\n                resetBoard();\r\n              }}\r\n            >\r\n              restart\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, {useState } from \"react\";\r\nimport Board from \"../Board\";\r\nimport \"./style.css\";\r\nexport default function Game() {\r\n  const [history, setHistory] = useState([{\r\n    squares: Array(9).fill(null),\r\n    currentSquare: null,\r\n    winner: null,\r\n  }]);\r\n  const [xIsNext, setxIsNext] = useState(true);\r\n  const [stepNumber, setStepNumber] = useState(0);\r\n  const [isAscending, setIsAscending] = useState(true);\r\n  const current = history[stepNumber];\r\n\r\n  const calculateWinner = (squares) => {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (\r\n        squares[a] &&\r\n        squares[a] === squares[b] &&\r\n        squares[a] === squares[c]\r\n      ) {\r\n        return lines[i];\r\n      }\r\n    }\r\n    if (!squares.includes(null)) {\r\n      return 1;\r\n    }\r\n    return null;\r\n  };\r\n  const winner = calculateWinner(current.squares);\r\n  const handleClick = (i) => {\r\n    const histor = history.slice(0, stepNumber + 1);\r\n    const current = histor[histor.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = xIsNext ? \"X\" : \"O\";\r\n    setHistory(\r\n      history.concat({\r\n        squares: squares,\r\n        currentSquare: i,\r\n        x: i % 3,\r\n        y: Math.floor(i / 3),\r\n        player: xIsNext ? \"X\" : \"O\",\r\n        winner: calculateWinner(squares),\r\n      })\r\n    );\r\n    setxIsNext(!xIsNext);\r\n    setStepNumber(history.length);\r\n  };\r\n  const jumpTo = (step) => {\r\n    setStepNumber(step);\r\n    setxIsNext(step % 2 === 0);\r\n  };\r\n  const reStart = () => {\r\n    setHistory([{ squares: Array(9).fill(null), currentSquare: null }]);\r\n    setStepNumber(0);\r\n    setxIsNext(true);\r\n  };\r\n  const sortMove = () => {\r\n    setIsAscending(!isAscending);\r\n  };\r\n  const renderLocation = (player) => {\r\n    let histor = [...history];\r\n    let his = isAscending ? histor : histor.splice(0).reverse();\r\n    let color = player === \"X\" ? \"red\" : \"blue\";\r\n    let step = stepNumber;\r\n    if (!isAscending) {\r\n      step = his.length - step - 1;\r\n    }\r\n    return his.map((e, i) => {\r\n      if (e.player === player) {\r\n        return (\r\n          <button\r\n            key={i}\r\n            onClick={() =>\r\n              isAscending ? jumpTo(i) : jumpTo(his.length - i - 1)\r\n            }\r\n            className={step === i ? \"current\" : \"\"}\r\n          >\r\n            {isAscending ? i : his.length - i - 1}.{\"  \"}Move to{\" \"}\r\n            <span style={{ color }}>\r\n              [{e.x},{e.y}]\r\n            </span>\r\n          </button>\r\n        );\r\n      }\r\n      return null;\r\n    });\r\n  };\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"game-board\">\r\n        <Board\r\n          boardLength={3}\r\n          xIsNext={xIsNext}\r\n          squares={current.squares}\r\n          onClick={handleClick}\r\n          winner={winner}\r\n          currentSquare={current.currentSquare}\r\n          restart={reStart}\r\n        />\r\n      </div>\r\n      <div className=\"game-info\">\r\n        {history.length === 1 ? (\r\n          <div className=\"title-1\">Welcome</div>\r\n        ) : (\r\n          <>\r\n            <div className=\"status\">\r\n              History\r\n              <span>\r\n                <button onClick={() => reStart()}>Restart</button>\r\n              </span>\r\n              <span>\r\n                <button onClick={() => sortMove()}>\r\n                  Sort move: {isAscending ? \"Ascending\" : \"Decending\"}\r\n                </button>\r\n              </span>\r\n            </div>\r\n            <div className=\"info\">\r\n              {isAscending ? (\r\n                <>\r\n                  <div className=\"info-x\">\r\n                    <div className=\"status\">X</div>\r\n                    <div className=\"move\">{renderLocation(\"X\")}</div>\r\n                  </div>\r\n                  <div className=\"info-o\">\r\n                    <div className=\"status\">O</div>\r\n                    <div className=\"move\">{renderLocation(\"O\")}</div>\r\n                  </div>\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <div className=\"info-o\">\r\n                    <div className=\"status\">O</div>\r\n                    <div className=\"move\">{renderLocation(\"O\")}</div>\r\n                  </div>\r\n                  <div className=\"info-x\">\r\n                    <div className=\"status\">X</div>\r\n                    <div className=\"move\">{renderLocation(\"X\")}</div>\r\n                  </div>\r\n                </>\r\n              )}\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Game from \"./container/Game\";\r\nfunction App() {\r\n  return (\r\n    <div className=\"Game\">\r\n      <div className=\"title\">Tic Tac Toe</div>\r\n      <div>\r\n        <Game />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}