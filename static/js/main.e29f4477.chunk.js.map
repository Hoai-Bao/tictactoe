{"version":3,"sources":["container/Square/index.js","container/Board/index.js","App.js","serviceWorker.js","index.js"],"names":["Square","value","onClick","color","className","style","Board","props","renderSquare","i","state","squares","handleClick","console","log","calculateWinner","slice","xIsNext","setState","lines","length","a","b","c","includes","winnerColor","resetBoard","Array","fill","board","checkWinner","this","opacity","map","_","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e29f4477.chunk.js","sourcesContent":["import React from 'react'\r\nimport './style.css'\r\n\r\nexport default function Square({value,onClick}) {\r\n    const color = value==='X'?'red':'blue';\r\n    return (\r\n        <div className=\"square\" onClick={onClick} style={{color:color}}>\r\n            {value}\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Square from \"../Square\";\r\nimport \"./style.css\";\r\nexport default class Board extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      squares: Array(9).fill(null),\r\n      xIsNext: true,\r\n      board: Array(3).fill(0),\r\n    };\r\n  }\r\n  renderSquare = (i) => {\r\n    return (\r\n      <Square\r\n        value={this.state.squares[i]}\r\n        onClick={() => {\r\n          this.handleClick(i);\r\n        }}\r\n      />\r\n    );\r\n  };\r\n  handleClick = (i) => {\r\n    console.log(this.calculateWinner(this.state.squares));\r\n    const squares = this.state.squares.slice();\r\n    if (squares[i] || this.calculateWinner(this.state.squares)) return;\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n    this.setState({\r\n      squares,\r\n      xIsNext: !this.state.xIsNext,\r\n    });\r\n  };\r\n  calculateWinner = (squares) => {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (\r\n        squares[a] &&\r\n        squares[a] === squares[b] &&\r\n        squares[a] === squares[c]\r\n      ) {\r\n        return squares[a];\r\n      }\r\n    }\r\n    if (!squares.includes(null)) {\r\n      return 1;\r\n    }\r\n    return null;\r\n  };\r\n  winnerColor = () => {\r\n    return this.state.xIsNext ? \"blue\" : \"red\";\r\n  };\r\n  resetBoard = () => {\r\n    this.setState({\r\n      squares: Array(9).fill(null),\r\n    });\r\n  };\r\n  render() {\r\n    const checkWinner = this.calculateWinner(this.state.squares);\r\n    const color = this.state.xIsNext ? \"red\" : \"blue\";\r\n    const opacity = checkWinner ? 0.6 : 1;\r\n    return (\r\n      <div className=\"board-main\">\r\n        {checkWinner === null ? (\r\n          <div className=\"status\">\r\n            Next Player :{\" \"}\r\n            <span style={{ color }}>{this.state.xIsNext ? \"X\" : \"O\"}</span>\r\n          </div>\r\n        ) : checkWinner === 1 ? (\r\n          <div className=\"status\">Draw</div>\r\n        ) : (\r\n          <div className=\"status\">\r\n            Winner :{\" \"}\r\n            <span style={{ color: this.winnerColor() }}>\r\n              {!this.state.xIsNext ? \"X\" : \"O\"}\r\n            </span>\r\n          </div>\r\n        )}\r\n        <div className=\"board\">\r\n          {this.state.board.map((_, i) => (\r\n            <div className=\"row\" key={i} style={{ opacity }}>\r\n              {this.renderSquare(i * 3)}\r\n              {this.renderSquare(i * 3 + 1)}\r\n              {this.renderSquare(i * 3 + 2)}\r\n            </div>\r\n          ))}\r\n          <div className=\"control\">\r\n            {checkWinner ? (\r\n              <button\r\n                onClick={() => {\r\n                  this.resetBoard();\r\n                }}\r\n              >\r\n                restart\r\n              </button>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Board from \"./container/Board\";\r\nfunction App() {\r\n  return (\r\n    <div className=\"Game\">\r\n      <div className=\"title\">Tic Tac Toe</div>\r\n      <div>\r\n        <Board />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}